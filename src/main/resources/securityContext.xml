<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<context:component-scan base-package="com.sub.costom, com.sub.service">
 		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
 	</context:component-scan>
 	
	<bean id="customJdbcDaoImpl" class="com.sub.costom.CustomJdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="rolePrefix" value="" />
		<property name="usersByUsernameQuery" value=
			"SELECT `UserID`, `passWord`, `mobile`, `address`, `email`, `enabled`
			FROM `joohyung`.`TB_SEUSER`
			WHERE UserID=?" />
		<property name="authoritiesByUsernameQuery" value=
						"SELECT AUTHORITYSTR
						FROM `joohyung`.`TB_SEauthority`
						JOIN `joohyung`.`TB_SEUser_authority` USING(AUTHORITYNO)
						WHERE TB_SEUser_authority.USERID = ?"/>
		<!--	그룹 사용x 
		<property name="groupAuthoritiesByUsernameQuery" value="SELECT B.AUTHORITY FROM GROUPS_MEMBER A, GROUPS_AUTHORITY B WHERE A.MEMBER_ID=? AND A.GROUP_ID = B.GROUP_ID" />
		 -->
		<property name="enableGroups" value="false" />
	</bean>
	
	
 	
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider user-service-ref="customJdbcDaoImpl">
			 <sec:password-encoder ref="bcryptPasswordEncoder" />
		</sec:authentication-provider>
	</sec:authentication-manager>


	<bean id="customAuthenticationSuccessHandler" class="com.sub.costom.CustomAuthenticationSuccessHandler">
		<property name="targetUrlParameter" value="loginRedirect" />	<!-- loginRedirect는  view의 form 태그에서 정의 -->
		<property name="useReferer" value="false" />
		<property name="defaultUrl" value="/index" />
	</bean>

	<bean id="customAuthenticationFailureHandler" class="com.sub.costom.CustomAuthenticationFailureHandler">
		<property name="loginidname" value="userid" />
		<property name="loginpasswdname" value="userpw" />
		<property name="loginredirectname" value="loginRedirect" />
		<property name="exceptionmsgname" value="securityexceptionmsg" />
		<property name="defaultFailureUrl" value="/loginForm?fail=true" />
	</bean>

	<sec:http use-expressions="true">
<!-- 		<sec:access-denied-handler error-page="/security/accessDenied"/> -->
		<!-- 접근 안됨
		<sec:intercept-url pattern="/loginCheck"
			access="permitAll" requires-channel="https"/>
		<sec:intercept-url pattern="/loginForm"
			access="permitAll" requires-channel="https"/>
		-->
		<sec:intercept-url pattern="/admin/**"
			access="hasAuthority('SEC_ADMIN')" />
		<sec:intercept-url pattern="/user/**"
			access="hasAuthority('SEC_USER')" />
		<sec:intercept-url pattern="/**" access="permitAll" />
		<sec:form-login 
			login-page="/loginForm"
			login-processing-url="/loginCheck"
			username-parameter="userid"
			password-parameter="userpw"
			
			authentication-success-handler-ref="customAuthenticationSuccessHandler"
			authentication-failure-handler-ref="customAuthenticationFailureHandler"
		/>
		<sec:logout
			logout-url="/logout"
			logout-success-url="/index"
		/>
	</sec:http>

</beans>